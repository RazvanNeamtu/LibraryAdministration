// <auto-generated />
using System;
using LibraryAdministration.DataAccess.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace LibraryAdministration.DataAccess.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230521001309_EntitiesAndData")]
    partial class EntitiesAndData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AuthorBook", b =>
                {
                    b.Property<int>("AuthorId")
                        .HasColumnType("integer");

                    b.Property<int>("BooksId")
                        .HasColumnType("integer");

                    b.HasKey("AuthorId", "BooksId");

                    b.HasIndex("BooksId");

                    b.ToTable("AuthorBook");

                    b.HasData(
                        new
                        {
                            AuthorId = 1,
                            BooksId = 1
                        },
                        new
                        {
                            AuthorId = 2,
                            BooksId = 2
                        },
                        new
                        {
                            AuthorId = 2,
                            BooksId = 3
                        },
                        new
                        {
                            AuthorId = 3,
                            BooksId = 4
                        },
                        new
                        {
                            AuthorId = 3,
                            BooksId = 5
                        },
                        new
                        {
                            AuthorId = 4,
                            BooksId = 7
                        },
                        new
                        {
                            AuthorId = 5,
                            BooksId = 8
                        },
                        new
                        {
                            AuthorId = 6,
                            BooksId = 9
                        },
                        new
                        {
                            AuthorId = 7,
                            BooksId = 9
                        },
                        new
                        {
                            AuthorId = 7,
                            BooksId = 1
                        });
                });

            modelBuilder.Entity("BookRental", b =>
                {
                    b.Property<int>("BooksId")
                        .HasColumnType("integer");

                    b.Property<int>("RentalsId")
                        .HasColumnType("integer");

                    b.HasKey("BooksId", "RentalsId");

                    b.HasIndex("RentalsId");

                    b.ToTable("BookRental");
                });

            modelBuilder.Entity("LibraryAdministration.DataAccess.Entities.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FirstName = "Mircea",
                            LastName = "Eliade"
                        },
                        new
                        {
                            Id = 2,
                            FirstName = "Mihail",
                            LastName = "Sadoveanu"
                        },
                        new
                        {
                            Id = 3,
                            FirstName = "Liviu",
                            LastName = "Rebreanu"
                        },
                        new
                        {
                            Id = 4,
                            FirstName = "George",
                            LastName = "Calinescu"
                        },
                        new
                        {
                            Id = 5,
                            FirstName = "Camil",
                            LastName = "Petrescu"
                        },
                        new
                        {
                            Id = 6,
                            FirstName = "Mihai",
                            LastName = "Eminescu"
                        },
                        new
                        {
                            Id = 7,
                            FirstName = "Razvan",
                            LastName = "Neamtu"
                        });
                });

            modelBuilder.Entity("LibraryAdministration.DataAccess.Entities.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("ImageId")
                        .HasColumnType("integer");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ImageId");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ImageId = 7,
                            Quantity = 20,
                            Title = "Maitreyi"
                        },
                        new
                        {
                            Id = 2,
                            ImageId = 1,
                            Quantity = 5,
                            Title = "Baltagul"
                        },
                        new
                        {
                            Id = 3,
                            ImageId = 2,
                            Quantity = 5,
                            Title = "Dumbrava Minunata"
                        },
                        new
                        {
                            Id = 4,
                            ImageId = 4,
                            Quantity = 7,
                            Title = "Hanul Ancutei"
                        },
                        new
                        {
                            Id = 5,
                            ImageId = 5,
                            Quantity = 10,
                            Title = "Ion"
                        },
                        new
                        {
                            Id = 6,
                            ImageId = 8,
                            Quantity = 1,
                            Title = "Padurea Spanzuratilor"
                        },
                        new
                        {
                            Id = 7,
                            ImageId = 3,
                            Quantity = 2,
                            Title = "Enigma Otiliei"
                        },
                        new
                        {
                            Id = 8,
                            ImageId = 9,
                            Quantity = 2,
                            Title = "Ultima noapte de dragoste, intaia noapte de razboi"
                        },
                        new
                        {
                            Id = 9,
                            ImageId = 6,
                            Quantity = 3,
                            Title = "Luceafarul"
                        });
                });

            modelBuilder.Entity("LibraryAdministration.DataAccess.Entities.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Images");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Baltagul.jpg",
                            Path = "Images/Baltagul.jpg"
                        },
                        new
                        {
                            Id = 2,
                            Name = "DumbravaMinunata.jpg",
                            Path = "Images/DumbravaMinunata.jpg"
                        },
                        new
                        {
                            Id = 3,
                            Name = "EnigmaOtiliei.jpg",
                            Path = "Images/EnigmaOtiliei.jpg"
                        },
                        new
                        {
                            Id = 4,
                            Name = "HanulAncutei.jpg",
                            Path = "Images/HanulAncutei.jpg"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Ion.jpg",
                            Path = "Images/Ion.jpg"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Luceafarul.jpg",
                            Path = "Images/Luceafarul.jpg"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Maitreyi.jpg",
                            Path = "Images/Maitreyi.jpg"
                        },
                        new
                        {
                            Id = 8,
                            Name = "PadureaSpanzuratilor.jpg",
                            Path = "Images/PadureaSpanzuratilor.jpg"
                        },
                        new
                        {
                            Id = 9,
                            Name = "UltimaNoapteDeDragosteIntaiaNoapteDeRazboi.jpg",
                            Path = "Images/UltimaNoapteDeDragosteIntaiaNoapteDeRazboi.jpg"
                        });
                });

            modelBuilder.Entity("LibraryAdministration.DataAccess.Entities.Rental", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("RentalEndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("RentalPeriod")
                        .HasColumnType("integer");

                    b.Property<DateTime>("RentalStartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserInfoId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserInfoId");

                    b.ToTable("Rentals");
                });

            modelBuilder.Entity("LibraryAdministration.DataAccess.Entities.UserInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CNP")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("UsersInfo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "7b774ec1-3386-4f1b-94de-d8fb63b85b32",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6483980d-65f6-4ef8-a274-a76d6122cdd3",
                            Email = "admin@admin.ro",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@ADMIN.RO",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEChNlSvVTC5j0Lf7KuMN5BsSFExI5TyRbProHh5db+tyV6LJr5pQcLRwYt+KkaQB2Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "PKGPPFXQRYMHBRJQ4TSG4DA5EROZWGGZ",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("AuthorBook", b =>
                {
                    b.HasOne("LibraryAdministration.DataAccess.Entities.Author", null)
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryAdministration.DataAccess.Entities.Book", null)
                        .WithMany()
                        .HasForeignKey("BooksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BookRental", b =>
                {
                    b.HasOne("LibraryAdministration.DataAccess.Entities.Book", null)
                        .WithMany()
                        .HasForeignKey("BooksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryAdministration.DataAccess.Entities.Rental", null)
                        .WithMany()
                        .HasForeignKey("RentalsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LibraryAdministration.DataAccess.Entities.Book", b =>
                {
                    b.HasOne("LibraryAdministration.DataAccess.Entities.Image", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId");

                    b.Navigation("Image");
                });

            modelBuilder.Entity("LibraryAdministration.DataAccess.Entities.Rental", b =>
                {
                    b.HasOne("LibraryAdministration.DataAccess.Entities.UserInfo", "UserInfo")
                        .WithMany()
                        .HasForeignKey("UserInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserInfo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
